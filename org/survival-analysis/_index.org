#+TITLE: 生存時間解析
#+hugo_base_dir: ../../
#+hugo_section: /docs/survival_analysis/

* 生存時間解析とは
なんらかの期間の長さを解析する統計分野のこと。
「生存時間」という名前がついていることから、伝統的には医学や保険数学の分野で人間が死ぬまでの時間の長さを統計的に調べるための分野であった。

しかし、その応用範囲は単に死亡までの時間の長さだけではなく、何らかの期間の長さとみなしうるもの全てに適用できる。

例えば、以下のような期間が生存時間解析によって調べられる。
- ある特徴の人々が死ぬまでの期間
- 薬の投与から治癒までの期間。
- ユーザーがウェブ会員に登録してから登録を解除するまでの期間
- 新しい機械を稼動させてからそれが壊れるまでの期間
- 週刊少年ジャンプでの漫画の連載期間

* 生存時間解析の基本
生存時間解析に特有の基本的な考え方がいくつかある。
以下、それらを解説していく。
** 打切り (Censoring)
話を想像しやすいように、マウスに薬を投与してから死ぬまでの長さを調べていると考えよう。
実験の常として、観察期間は限られている。従って、全てのマウスが死ぬまで実験を続けることはできない。
実験終了時点で生き残っているマウスがいたとしても、実験に参加したマウス全体の寿命について、なんらかの結論を出さなければならない。

実験観測をおこなった期間中に死亡を観測できなかったサンプルのことを、生存時間解析では *右打切り(right-censored)* という。

生存時間解析において、右打切りサンプルを無視すると、誤った結論を導いてしまうことになる。
ちょっとした思考実験により、そのことを明らかにしてみよう。

いま、あるサンプルの寿命を調べているとする。
現在は調べはじめて 5 年で、そろそろ観察をやめにして結論を出したい。
#+begin_src jupyter-python :session py :kernel py-project :async yes :file :exports results
from lifelines.plotting import plot_lifetimes
import numpy as np
from numpy.random import default_rng
import matplotlib.pyplot as plt

N_SAMPLE = 25
CURRENT_TIME = 5
TRUE_LIFETIME = 8

rng = default_rng()
actual_lifetimes = rng.exponential(TRUE_LIFETIME, size=N_SAMPLE)
observed_lifetimes = np.minimum(actual_lifetimes, CURRENT_TIME)
death_observed = actual_lifetimes < CURRENT_TIME

ax = plot_lifetimes(observed_lifetimes, event_observed=death_observed, sort_by_duration=False)

ax.set_xlim(0, CURRENT_TIME * 2)
ax.vlines(CURRENT_TIME, 0, N_SAMPLE+5, lw=2, ls='--')
ax.set_xlabel('time')
ax.set_title(f"Births and deaths of our population, at t={CURRENT_TIME}")
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e8556f42dbe79480ed58198da548521675d2edc8.png]]

青色が右打切りサンプルで、赤色は期間内に死亡が観測できたサンプルである。

もしもこのサンプルで右打切りを無視して、赤色の期間を単に平均することによって平均寿命を算出しようとすれば、本来の寿命よりもかなり短い結果を導いてしまう。
また、仮に、青色の右打切りサンプルを全て寿命 5 年として、先程の計算に加えて平均寿命を出そうとしても、それでもまだ本来の寿命より短い推定結果となる。
そのような推定はどうかんばっても実験期間の 5 年より長くなることはない。

実は、この観察を全部のサンプルが死ぬまで続けられたとしたら、
#+begin_src jupyter-python :session py :kernel py-project :async yes :file :exports results
ax = plot_lifetimes(actual_lifetimes, event_observed=death_observed, sort_by_duration=False)
ax.vlines(CURRENT_TIME, 0, N_SAMPLE+5, lw=2, ls='--')
ax.set_xlabel('time')
ax.set_title(f"Births and deaths of our population, at t={CURRENT_TIME}")
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6b26541f3a445aa1a1b37e32e83e13e039668f3f.png]]

となる。

実際、この疑似データは、平均寿命 8 年として指数分布から作成した。
** 生存関数
生存時間を確率論の中で捉えるために、サンプルの寿命を確率変数として考えよう。

\(T\) を生存時間を表す確率変数とする。 \(T\) は少なくとも \(T \ge 0\) である。

このとき、例えば、寿命が 5 年以上である確率は、確率論の言葉で

\[ \mathrm{P}(T \ge t) \]

と書き表す。

さて、これを一般化して、 正の実数 \(t\) に対して、 \(T\) が \(t\) を超える確率を与える関数 \(S\) を考える。

\[ S(t) = \mathrm{P}(T > t) \]

この関数 \(S\) を、 *生存関数* という。
*** 生存関数の性質
まず、 \(S(t)\) は確率であるから、

\[ 0 \le S(t) \le 1 \]

次に、 \(t\) が大きくなればなるほど、 \(S(t)\) は小さくなると考えられるので、 \(S(t)\) は単調減少関数である。

最後に、 \(S(t)\) と 累積分布関数 \(F_{T}(t)\) との関係を考えたい。

まず、 累積分布関数(Cumulative Distribution Function CDF)とは、寿命 \(T\) が \(t\) 以下となる確率を与える関数のことである。

\[ F_T(t) = \mathrm{P}(T \le t) \]

従って、生存関数 \(S(t)\) と累積分布関数 \(F_{T}(t)\) の間では、

\[ F_T(t) = 1 - S(t) \]

が成り立つ。

ちなみに、、累積分布関数 \(F_T(t\) を \(t\) について微分したものを確率密度関数(Probability Density Function PDF)といい、 \(f_T(t)\) で表す。

\[ f(t) = \frac{dF_T}{dt} \]
** ハザード関数
いま、目の前に生きているマウスがいるとしよう。このマウスが、いまこの瞬間に死亡する確率はどのように表せるだろうか。

現在の時刻を \(t\) とおくと、このマウスは時刻 \(t\) までは生存している。すなわち、考えようとしている確率は、 \(T > t\) という条件のもとの条件つき確率である。
また、いまこの瞬間に死ぬというのは、限りなく小さい \(\delta t\) に対して、 \(T\) が \(t\) と \(t+\delta t\) の間にあるということである。
総合すると、求める確率は、

\[ \lim_{\delta t \to 0} \mathrm{P}(t \le T \le t + \delta t | T > t) \]

と表せる。
この確率は 0 に収束する。そこで、これを \(\delta t\) で割った値を考える。 これを、時刻 \(t\) における *ハザード率* といい、 \(h(t)\) であらわす。

\[ h(t) = \lim_{\delta t \to 0}\cfrac{ \mathrm{P}(t \le T \le t + \delta t | T > t) }{\delta t} \]

*** 累積ハザード関数
ハザード関数 \(h(t)\) を t について積分したものを *累積ハザード関数* といい、 \(H(t)\) で表す。

\[ H(t) = \int_{0}^{t} h(u)\mathrm{d}u \]

*** 生存関数とハザード関数の関係
ハザード関数の定義式を変形していく。

まず、条件つき確率の定義から、

\[ \mathrm{P}(t \le T \le t + \delta t | T > t) = \frac{\mathrm{P}(t < T \le t + \delta t)}{\mathrm{P}(T > t)} \]

分母について見ると、

\[ \mathrm{P}(t < T \le t + \delta t) = \mathrm{P}(T > t) - \mathrm{P}(T > t + \delta t) \]

生存関数 \(S(t)\) の定義より、 \(\mathrm{P}(T> t) = S(t)\) だから、

\[ \mathrm{P}(t \le T \le t + \delta t | T > t) = \frac{S(t) - S(t + \delta t)}{S(t)} \]

従って、微分の定義より、

\[ h(t) = -\frac{S'(t)}{S(t)} \]

両辺を \(0\) から \(t\) まで積分すると、

\[ H(t) = -\log{S(t)} \]

故に、

\[ S(t) = \exp{(-H(t))} \]

従って、生存関数、ハザード関数、累積ハザード関数とは互いに変換可能である。
* 生存時間解析の関数変換マンダラ
これまで出て来た関数を整理しよう。

寿命を表す確率変数を \(T\) とおくとき、

| 関数名           | 記号       | 定義                        |
|------------------+------------+-----------------------------|
| 生存関数         | \(S(t)\)   | \(\mathrm{P}(T>t)\)         |
| 累積分布関数     | \(F_T(t)\) | \(\mathrm(T \le t)\)        |
| 確率密度関数     | \(f_T(t)\) | \(F'_T(t)\)                 |
| ハザード関数     | \(h(t)\)   | \(-S'(t)/S(t)\)             |
| 累積ハザード関数 | \(H(t)\)   | \(\int_0^th(u)\mathrm{d}u\) |

python の生存時間解析のライブラリ ~lifelines~ にこれらの関係を図示したものが載っている。
[[https://lifelines.readthedocs.io/en/latest/Survival%20Analysis%20intro.html#hazard-function]]
