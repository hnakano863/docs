'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/','title':"Docs",'content':""});index.add({'id':1,'href':'/docs/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90/','title':"時系列分析",'content':"時系列データとは 一定の時間間隔でとられたデータのことを時系列データという。\n記号法 時点 \\(t\\) におけるデータを \\(y_t\\) と書く。時点 \\(t\\) から \\(k\\) 時点前のデータを \\(y_{t-k}\\) と書く。特に、1時点前のデータは \\(y_{t-1}\\) と書く。\n\\(T\\) 時点までの一連の時系列データをまとめて \\(Y_T\\) のように書く。\n\\[ Y_T = \\{y\\}^T_{t=1} = \\{y_1, y_2, \\cdots ,y_T\\} \\]\nデータ生成過程(DGP : Data Generating Process) 時間経過に従って変化する確率分布のことをデータ生成過程という。データ生成過程のことを単に確率過程ということもある。時系列データはデータ生成過程の一つの実現値であると考えられる。\n各時点のデータから、そのデータを生み出すもととなったデータ生成過程を推測することを、モデリングという。\n平均 時刻 \\(t\\) におけるデータの平均を \\(\\mu_t = \\mathrm{E}[y_t]\\) と表す\n分散 時刻 \\(t\\) でにおけるデータの分散を \\(\\mathrm{Var}[y_t] = \\mathrm{E}[(y_t - \\mu_t)^2]\\) と表す。\n時系列データの構造 時系列データは以下の式のような構造をもつ\n時系列データ = 短期の自己相関 + 周期成分 + トレンド + 外因性 + ホワイトノイズ\n自己相関 自己相関とは、異なる時点のデータ同士の相関である。時系列データは前後のデータと相関をもつことが多い。\n例えば、お風呂の温度の変化を考えよう。前の時点でのお湯の温度が 42℃なら、次の時点の温度もだいたい 42℃程度と考えられる。一方、前の時点の温度が 30℃であったとして、次の時点の温度がいきなり 40℃まで上がることは考えにくい。すなわち、この例では、前時点の温度が高いほど次の時点での温度が高くなると考えることができる。\nこのように前後のデータ間に存在する相関関係のことを自己相関という。\n数式表現 以上で説明した自己相関を、数式を用いて定義する。\nまず、自己共分散を定義する\n  自己共分散\n\\(k\\) 時点前のデータとの共分散を \\(k\\) 次の自己共分散といい、以下の式で定義する。\n\\[ \\gamma_{kt} = \\mathrm{Cov}[y_t,y_{t-k}] = \\mathrm{E}[(y_t - \\mu_t)(y_{t-k}-\\mu_{t-k})] \\]\n    自己相関\n自己共分散を標準化したものを自己相関として定義する。\n\\(k\\) 次の自己相関は以下の式で表される。\n\\[ \\rho_{kt} = \\mathrm{Corr}[y_t,y_{t-k}] = \\cfrac{\\mathrm{Cov}[y_t,y_{t-k}]}{\\sqrt{\\mathrm{Var}[y_t]\\mathrm{Var}[y_{t-k}]}} \\]\n自己相関は標準化されているので、その絶対値 \\(|\\rho_{kt}|\\) は 1 未満になる。\n  偏自己相関 \\(k\\) 次の自己相関から、 \\(k-1\\) 次までの自己相関の影響を除いたものを、偏自己相関という。\n偏自己相関の概念について理解を深めるために、ちょっとした計算をしてみよう。\nいま、1時点前のデータとの自己相関が 0.8 の時系列データがあるとする。すなわち、時点 \\(t\\) におけるデータ \\(y_t\\) は、 1 時点前のデータ \\(y_{t-1}\\) を用いて\n\\[y_t = 0.8y_{t-1}\\]\nと表せる。\nこのとき、1時点前のデータと 2 時点前のデータとの間にも同様の相関関係があるはずなので、\n\\[ y_{t-1} = 0.8y_{t-2} \\]\nが成り立つ。\n二つの数式から合わせて \\(y_t{t-1}\\) を消去することで、 \\(y_t\\) と \\(y_{t-2}\\) との相関関係が導き出せる。\n\\[ y_{t} = 0.8 (0.8 y_{t-2}) = 0.64 y_{t-2} \\]\nこのように、2時点前との関係性については何も定義していなかったにも関わらず、1時点前との関係が 2 時点前との関係にまで波及してしまう。\nこのような波及する相関関係の影響を除いて\\(y_t\\) と \\(y_{t-k}\\) との相関関係を表すのが \\(k\\) 次の偏自己相関である。\n\\(k\\) 次の偏自己相関の定義式は以下の通り\n\\[ P_{tk} = \\cfrac{\\mathrm{Cov}[y_t-\\hat{y}_t,y_{t-k}-\\hat{y}_{t-k}]}{\\sqrt{\\mathrm{Var}[y_t-\\hat{y}_t]\\mathrm{Var}[y_{t-k}-\\hat{y}_{t-k}]}} \\]\nただし、 \\(\\hat{y}_t\\) は \\(t\\) 時点における \\(y_t\\) の推定値。\nコレログラム 何時点前との自己相関が強いか調べるために、横軸にラグを、縦軸に相関係数を取ったグラフをコレログラムという。\nPython を使ってコレログラムがどんなものか見てみよう。\nまず、疑似データを作成する。\nimport statsmodels.api as sm from statsmodels.tsa.arima_process import ArmaProcess import matplotlib.pyplot as plt # 疑似データを作成 # y[t] = 0.8 * y[t-1]のプロセスを作成 model = ArmaProcess(ar=[1, - 0.8], ma=[1]) # 200 サンプル作成 samples = model.generate_sample(200) plt.plot(samples) plt.show()   まずは自己相関のコレログラム\nsm.graphics.tsa.plot_acf(samples) plt.show()   縦軸が相関係数、横軸がデータ同士のラグの大きさである。ラグ 0 で相関係数 1 (自分自身との相関は 1)であり、ラグ 1 のとき相関係数 0.8 であることがわかる。しかし、実際には相関していないはずのラグ 2 以上のデータとも相関関係が見える。\nそれでは、本当に相関関係があるかどうか、偏自己相関のコレログラムを見てみよう。\nsm.graphics.tsa.plot_pacf(samples) plt.show()   偏自己相関のコレログラムを見れば、真実のところラグ 2 以上では相関関係がないということがわかる。\n周期成分 ホワイトノイズ 未来を予測するための情報を含まない純粋な雑音のことをホワイトノイズという。ホワイトノイズは \\(\\varepsilon_t\\) という記号で表されることが多い。\nより厳密にホワイトノイズのみたす性質を述べると、以下の 3 つである。\n 期待値が 0 分散が時間に寄らず一定 ラグが 1 以上の自己相関が 0  ホワイトノイズの確率分布として、平均 0, 分散 \\(\\sigma^2\\) の正規分布がしばしば仮定される。\nまた、 \\(\\varepsilon_t\\) がホワイトノイズに従うことを明示するために、\n\\[ \\varepsilon_t \\sim \\mathrm{W.N.}(\\sigma^2) \\]\nと書くことがある。\nホワイトノイズが実際どのような見た目をしているのかというと、\nimport numpy as np # 分散 4 のホワイトノイズを 200 サンプル作成 white_noise = np.random.normal(0, 4, size=200) plt.plot(white_noise) plt.show()   実際、このホワイトノイズの自己相関を確認しておこう。\nsm.graphics.tsa.plot_acf(white_noise) トレンド 時系列データの値が全体的に上昇したり下降したりするとき、トレンドをもつということがある。しかし、トレンドとはなんだろう。数式で表せばどうなるのか。\n以下では、それを見る。\niid 系列 互いに相関がないことを独立という。データが互いに独立で、しかも同じ確率分布から生成されている場合、これらを独立同分布(i.i.d.)なデータという。そして、i.i.d.なデータからなる時系列データを iid 系列という。\n平均 \\(\\mu\\) 分散 \\(\\sigma^2\\) の iid 系列を\n\\[ y_t \\sim \\mathrm{iid}(\\mu,\\sigma) \\]\nと表すことがある。\nランダムウォーク iid 系列の累積和からなる系列をランダムウォークという。数式で表すと、\n\\[ y_t = y_{t-1} + \\epsilon_t, ,,,,, \\epsilon_t \\sim \\mathrm{iid}(0, \\sigma^2) \\]\n例えば、ホワイトノイズの累積和はランダムウォークの一つである。ランダムウォークはこんな見た目をしている。\nplt.plot(white_noise.cumsum()) plt.show()   ランダムウォークの見た目は、データの生成のたびに大きくかわる。\nfig, ax = plt.subplots(nrows=2, ncols=2, figsize=(8, 5.5), sharex=True, sharey=True) for i in range(2): for j in range(2): wht_nz = np.random.normal(0, 4, size=100) ax[i,j].plot(wht_nz.cumsum()) plt.show()   ドリフト率 例えば、1時点進むごとに 2 ずつ増える時系列データを考えよう。そのようなデータは数式で\n\\[ y_t = y_{t-1} + 2 \\]\nと表せる。一般的に、\n\\[ y_t = y_{t-1} + \\delta \\]\nは時点ごとに \\(\\delta\\) ずつ増えていく。こういう時系列データを線形トレンドという。\nこれにさらにホワイトノイズ \\(\\varepsilon_t\\) をのせたものを「ドリフト率 \\(\\delta\\) の確率的トレンド」という\n\\[ y_t = y_{t-1} + \\delta + \\varepsilon_t\\]\nJulia を使って確率的トレンドをグラフにしてみよう。\nusing Plots using Distributions gr() ndist = Normal(0, 4) # ホワイトノイズの確率分布 delt = 2 # ドリフト率 # 配列を初期化 trends = zeros(200) # 初期値をセット trends[1] = 0 # データ作成 for i in 1:(length(trends)-1) trends[i+1] = trends[i] + delt + rand(ndist) end plot(trends)   外因性 外部要因による影響のこと。\n"});})();