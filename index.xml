<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Analysis Documentation on Learn Docs</title>
    <link>http://hanakno863.github.io/learn-docs/</link>
    <description>Recent content in Analysis Documentation on Learn Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    
	<atom:link href="http://hanakno863.github.io/learn-docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kaplan-Meier Method</title>
      <link>http://hanakno863.github.io/learn-docs/docs/survival_analysis/kaplan-meier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hanakno863.github.io/learn-docs/docs/survival_analysis/kaplan-meier/</guid>
      <description>カプランマイヤー法 カプランマイヤー法は、生存関数を実データから推測するためのノンパラメトリックな手法のひとつ。生存時間解析では最も基本的な手法である。
本稿では、カプランマイヤー法の説明のために、以下のデータセットを用いる。
start group z stop id event 0 0 1.0 0 3.0 1 True 1 0 1.0 0 5.0 2 False 2 0 1.0 1 5.0 3 True 3 0 1.0 0 6.0 4 True 4 0 1.0 0 6.0 5 False 5 6 1.0 1 8.0 5 False 6 0 0.0 1 4.0 6 False 7 0 0.0 0 5.0 7 False 8 5 0.0 1 7.</description>
    </item>
    
    <item>
      <title>Python による状態空間モデルの実装法</title>
      <link>http://hanakno863.github.io/learn-docs/docs/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90/state-space-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hanakno863.github.io/learn-docs/docs/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90/state-space-python/</guid>
      <description>Python で線形ガウス状態空間モデルを実現するには、統計分析向けライブラリの statsmodels  を用いるとよい。
statsmodels での線形ガウス状態空間モデルの式 statsmodels での線形ガウス状態空間モデルの式は、前の記事で導入した式と若干異なるので、注意が必要。実際に statsmodels で採用されている形式での線形ガウス状態空間モデルの式を示す。
\[ \begin{align} y_t &amp;amp;= Z_t \alpha_t + d_t + \varepsilon_t, &amp;amp; \varepsilon_t \sim \mathcal{N}(0, H_t) \\
\alpha_{t+1} &amp;amp;= T_t \alpha_t + c_t + R_t \eta_t, &amp;amp; \eta_t \sim \mathcal{N}(0, Q_t) \\
\end{align} \]
第 1 式の、\(y_t\) についての式が観測方程式である。
いくつかのベクトルについては、 statsmodels 固有の名前が与えられている。
   記号 名称 説明     \(Z_t\) design    \(d_t\) obs_intercept    \(H_t\) obs_cov 観測誤差の共分散   \(T_t\) transition    \(c_t\) state_intercept    \(R_t\) selection    \(Q_t\) state_cov 過程誤差の共分散    ローカル線形トレンドモデルの実装 ローカル線形トレンドモデルの式を下記に再掲する。</description>
    </item>
    
    <item>
      <title>状態空間モデル</title>
      <link>http://hanakno863.github.io/learn-docs/docs/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90/state-space-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hanakno863.github.io/learn-docs/docs/%E6%99%82%E7%B3%BB%E5%88%97%E5%88%86%E6%9E%90/state-space-model/</guid>
      <description>状態空間モデルの構成 状態空間モデルとは、直接観測されない「状態」の存在を仮定したモデルである。
基本的なワークフローは、
 方程式によるデータの表現 統計手法を用いた状態/パラメタの推定  の 2 部に分かれる。
方程式によるデータ表現 状態空間モデルでは、目に見えない状態変化と状態から得られる観測結果を 2 つの異なる方程式に分けて表現する。
 目に見えない状態の変化 : 状態方程式 状態から得られる観測結果 : 観測方程式  状態方程式 状態変化のプロセスを記述する方程式のことを状態方程式という。
状態方程式の概念式は、
{状態} = {前時点の状態を用いた予測値} + {過程誤差}
で表される。
観測方程式 状態から観測値を得るプロセスを記述する方程式を観測方程式という。
観測方程式の概念式は、
{観測値} = {状態} + {観測誤差}
で表される。
線形ガウス状態空間モデル 一次方程式でモデルが表現可能で、なおかつ誤差が正規分布に従うモデルのことを、線形ガウス状態空間モデルという。
状態空間モデルそのものはかなり幅広い概念だが、時系列データ分析の初歩では、大抵の状態空間モデルは線形ガウス状態空間モデルを仮定している。
線形ガウス状態空間モデルの場合は、状態の推定とモデルのパラメタの推定を分けて行うことができる。
 状態の推定: カルマンフィルタを使う。 モデルのパラメタの推定: 最尤法を使う。  この方法は、計算コストや実装コストが低く、ストリーム処理が可能で、オンライン予測に適している。
以下では、線形ガウス状態空間モデルの概略を述べる。
状態方程式と観測方程式 状態方程式 時点 \(t\) での状態を、\(\bm{\mu}_t\) とおく。ただし、 \(\bm{\mu}_t\) は \(D\) 次元ベクトルとする。
このとき、線形ガウス状態空間モデルにおける状態方程式は、
\[\begin{align} \bm{\mu}_t &amp;amp;= T_t\bm{\mu}_{t-1} + R_t\bm{\eta}_t, &amp;amp; \bm{\eta}_t \sim \mathcal{N}(0, Q_t) \end{align}\]</description>
    </item>
    
    <item>
      <title>累積ハザード関数</title>
      <link>http://hanakno863.github.io/learn-docs/docs/survival_analysis/cumulative-hazard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://hanakno863.github.io/learn-docs/docs/survival_analysis/cumulative-hazard/</guid>
      <description>累積ハザード関数の重要性 カプランマイヤー法は生存関数の推定を行う方法であった。
ここで、生存関数 \(S(t)\) と累積ハザード関数 \(H(t)\) の関係をもう一度思い出してみよう。
\[ \begin{align} H(t) &amp;amp;= -\log{S(t)} \\
S(t) &amp;amp;= \exp{(-S(t))} \ \end{align} \]
すなわち、 \(S(t)\) と \(H(t)\) は相互に変換可能である。
また、これに加えて、累積ハザード関数 \(H(t)\) を微分すれば、ハザード関数 \(h(t)\) を得ることができる。
\[ h(t) = \frac{\mathrm{d}}{\mathrm{d}t}H(t) \]
ハザード関数 \(h(t)\) は時刻がちょうど \(t\) のときに寿命を迎える確率に結びついている。
\[ h(t) = \lim_{\delta t \to 0}\frac{\mathrm{P(t \le T \le t + \delta t|T &amp;gt; t)}}{\delta t} \]
しかしながら、ハザード関数をデータから直接推定することは難しい。
累積ハザード関数を推定すれば、そこから生存関数やハザード関数を得ることができる。従って、生存時間解析において、累積ハザード関数を推定することは重要なステップとなる。
累積ハザード関数をデータから推定するためのノンパラメトリックな手法が、 Nelson-Aalen 法 である。
Nelson-Aalen 法 以下、Nelson-Aalen 法による累積ハザード関数の推定法について説明する。説明にはカプランマイヤー法のときと同じく カリフォルニア大学サンディエゴ校の例示用データセット を用いる。</description>
    </item>
    
  </channel>
</rss>